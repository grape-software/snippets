{
	"C# Controller class": {
		"scope": "csharp",
		"prefix": "gr-controller",
		"body": [
			"using Microsoft.AspNetCore.Mvc;",
			"using Microsoft.EntityFrameworkCore;",
			"using System;",
			"using System.Linq;",
			"using System.Linq.Dynamic.Core;",
			"using System.Threading.Tasks;",
			"",
			"[Route(\"[controller]\")]",
			"public class $1Controller : BaseApiController",
			"{",
			"public $1Controller(AppDBContext context, IConfiguration config) : base(context, config){",
			"}}"
		],
		"description": "Controller Class Body"
	},
	"Search API": {
		"prefix": "gr-search",
		"body": [
			"/// <summary>",
			"/// Search $3 in database with filters",
			"/// </summary>",
			"/// <remarks>",
			"/// Sample request:",
			"///     GET /$1s",
			"/// </remarks>",
			"/// <param name=\"search\">$4</param>",
			"/// <returns>Anonymous type totalCount=Total search parameters matched records, res=paged records, search=request search parameters</returns>",
			"/// <response code=\"200\">Executed without problems</response>",
			"/// <response code=\"401\">User is not logged or does'n have specific role</response>",
			"/// <response code=\"400\">Some other controlled errors</response>",
			"/// <response code=\"500\">Some other uncontrolled errors. Message has more detail</response>",
			"[HttpGet]",
			"public async Task<IActionResult> Get$1s([FromQuery]SearchModel search)",
			"{",
			"    try",
			"    {",
			"        var user = JWTUser; //get user from context",
			"        var q1 = from o in db.$1s",
			"                    select o;",
			"",
			"        // search each term in contains",
			"        if (!string.IsNullOrWhiteSpace(search.SearchText))",
			"            foreach (var s in search.SearchText.Split(\" \"))",
			"                q1 = q1.Where(x => x.Name.Contains(s)); // add with || all attributes that's need it",
			"",
			"        var totalCount = await q1.AsNoTracking().CountAsync();",
			"        if (string.IsNullOrWhiteSpace(search.SortBy))",
			"            q1 = q1.OrderBy(x => x.$2);",
			"        else",
			"            q1 = q1.OrderBy(search.SortBy +\" \"+ search.SortValue);",
			"        if (search.PageSize > 0)",
			"            q1 = q1.Page(search.PageIndex, search.PageSize);",
			"        var res = await q1.AsNoTracking().ToListAsync();",
			"        return Ok(new",
			"        {",
			"            totalCount,",
			"            res,",
			"            search",
			"        });",
			"    }",
			"    catch (Exception ex)",
			"    {",
			"        return HandleException(ex);",
			"    }",
			"}"
		],
		"description": "Grape Search API"
	},
	"Post API": {
		"prefix": "gr-post",
		"body": [
			"/// <summary>",
			"/// Add $1 to database",
			"/// </summary>",
			"/// <remarks>",
			"/// Sample request:",
			"///     POST /$1",
			"///      body $1{attributes}",
			"/// </remarks>",
			"/// <param name=\"$1\">Record to add, attributes must match with case sensitive, expect first letter always lowercase</param>",
			"/// <response code=\"200\">All right return $1 saved in database</response>",
			"/// <response code=\"401\">User is not logged or does'n have specific role</response>",
			"/// <response code=\"400\">Some other controlled errors</response>",
			"/// <response code=\"500\">Some other uncontrolled errors. Message text has more detail</response>",
			"[HttpPost]",
			"[Authorize(Roles = \"$2\")]",
			"public async Task<IActionResult> Post$1([FromBody]$1 record)",
			"{",
			"    if (!ModelState.IsValid)",
			"        return BadRequest(\"$1 has inconsistent values.\" + ModelErrors(ModelState));",
			"    //All business validation, min and max values, domain restrictions",
			"    try",
			"    {",
			"        record.UserId = JWTUser.UserID;",
			"        record.Created = DateTime.Now;",
			"        //Add record to database",
			"        db.$1s.Add(record);",
			"        await db.SaveChangesAsync();",
			"",
			"        return Ok(record);",
			"    }",
			"    catch (Exception ex) {",
			"        return HandleException(ex);",
			"    }",
			"}"
		],
		"description": "Grape Post API"
	},
	"Put API": {
		"prefix": "gr-put",
		"body": [
			"    /// <summary>",
			"    /// Update $1 from database",
			"    /// </summary>",
			"    /// <remarks>",
			"    /// Sample request:",
			"    ///     PUT /$1/XX",
			"    /// </remarks>",
			"    /// <param name=\"id\">Primary key of record</param>",
			"    /// <param name=\"$1\">Record to update, attributes must match with case sensitive, expect first letter always lowercase</param>",
			"    /// <response code=\"200\">All right return $1 saved in database</response>",
			"    /// <response code=\"401\">User is not logged or does'n have specific role</response>",
			"    /// <response code=\"400\">Some other controlled errors</response>",
			"    /// <response code=\"500\">Some other uncontrolled errors. Message text has more detail</response>",
			"    [HttpPut(\"{id}\")]",
			"    public async Task<IActionResult> Put$1(int id, [FromBody]$1 record)",
			"    {",
			"        if (!ModelState.IsValid)",
			"            return BadRequest(\"$1 has inconsistent values.\" + ModelErrors(ModelState));",
			"        if (id != record.$1Id)",
			"            return BadRequest(\"$1 ID in url different than in $1 parameter\");",
			"        try",
			"        {",
			"            if (!await db.$1s.AnyAsync(x=>x.$1Id == id))",
			"                return NotFound($\"$1 ID {id} not found.\");",
			"",
			"            record.Updated = DateTime.Now;",
			"            db.Entry(record).State = EntityState.Modified;",
			"            await db.SaveChangesAsync();",
			"        }",
			"        catch (Exception ex)",
			"        {",
			"            return HandleException(ex);",
			"        }",
			"    ",
			"        return Ok(record);",
			"    }"
		],
		"description": "Grape Put API"
	},
	"Delete API": {
		"prefix": "gr-delete",
		"body": [
			"/// <summary>",
			"/// Delete $1 from database",
			"/// </summary>",
			"/// <remarks>",
			"/// Ejemplo request:",
			"///     DELETE /$1/45",
			"/// </remarks>",
			"/// <param name=\"id\">Primary key of record</param>",
			"/// <response code=\"200\">All right return $1 deleted in database</response>",
			"/// <response code=\"401\">User is not logged or does'n have specific role</response>",
			"/// <response code=\"400\">Some other controlled errors</response>",
			"/// <response code=\"500\">Some other uncontrolled errors. Message text has more detail</response>",
			"[HttpDelete(\"{id}\")]",
			"[Authorize(Roles = \"\")]",
			"public async Task<IActionResult> Delete$1(int id)",
			"{",
			"    try",
			"    {",
			"        var record = await db.$1s.FindAsync(id);",
			"        if (record == null)",
			"        return NotFound($\"$1 ID {id} not found.\");",
			"",
			"        db.$1s.Remove(record);",
			"        await db.SaveChangesAsync();",
			"",
			"        return Ok(record);",
			"    }",
			"    catch (Exception ex)",
			"    {",
			"        return HandleException(ex);",
			"    }",
			"}"
		],
		"description": "Grape Delete API"
	},
	"Get One API": {
		"prefix": "gr-get-id",
		"body": [
			"/// <summary>",
			"/// Get $1 from database by primary key",
			"/// </summary>",
			"/// <remarks>",
			"/// Ejemplo request:",
			"///     GET /$1/45",
			"/// </remarks>",
			"/// <param name=\"id\">Primary key of record</param>",
			"/// <response code=\"200\">All right return $1 saved in database</response>",
			"/// <response code=\"401\">User is not logged or does'n have specific role</response>",
			"/// <response code=\"400\">Some other controlled errors</response>",
			"/// <response code=\"500\">Some other uncontrolled errors. Message text has more detail</response>",
			"[HttpGet(\"{id}\")]",
			"[Authorize(Roles = \"\")]",
			"public async Task<IActionResult> Get$1(int id)",
			"{",
			"    try",
			"    {",
			"      var record = await db.$1s",
			"              //Fill includes of first level",
			"              .FirstOrDefaultAsync(x => x.$1Id == id);",
			"",
			"      if (record == null)",
			"        return NotFound($\"$1 ID {id} not found.\");",
			"",
			"      return Ok(record);",
			"    }",
			"    catch (Exception ex)",
			"    {",
			"        return HandleException(ex);",
			"    }",
			"}"
		],
		"description": "Grape Get One API"
	},
	"Add dates filter to search API": {
		"prefix": "gr-search-dates",
		"body": [
			"                if(search.fromDate.HasValue)",
			"                    q1 = q1.Where(x=>x.$1>=search.fromDate.Value);",
			"                if(search.toDate.HasValue)",
			"                    q1 = q1.Where(x=>x.$1<=search.toDate.Value);",
			""
		],
		"description": "Add dates filter to search API"
	},
	"Add only active filter to search API": {
		"prefix": "gr-search-active",
		"body": [
			"if (search.OnlyActive)",
			"q1 = q1.Where(x => x.$1 == null);",
			""
		],
		"description": "Add only active filter to search API"
	},
	"Add int field filter in search API": {
		"prefix": "gr-search-param-int",
		"body": [
			"if (search.$1 > 0)",
			"q1 = q1.Where(x => x.$1 == search.$1);",
			""
		],
		"description": "Add int field filter in search API"
	},
	"Add not null field filter in search API": {
		"prefix": "gr-search-param-string-not-null",
		"body": [
			"if (!string.IsNullOrWhiteSpace(search.$1))",
			"q1 = q1.Where(x => x.$1 != null);",
			""
		],
		"description": "Add int field filter in search API"
	},
	"Add not null field Validation in POST API": {
		"prefix": "gr-post-validate-string-null",
		"body": [
			"if (string.IsNullOrWhiteSpace(record.$1))",
			"    return BadRequest(\"Attribute $1 is required.\");",
			""
		],
		"description": "Add not null field Validation in POST API"
	}
}