{
	"Search Template Angular Component": {
		"prefix": "gr-en-search-ts",
		"body": [
			"    working = false;",
			"    searchInfo: any;",
			"    storagekey = '';",
			"    items: any[] = [];",
			"    selected: any;",
			"    searched = false;",
			"    orderItems = [",
			"      { title: 'Item', data: 'nameOfField', selected: false }",
			"    ];",
			"    dialogAdvancedRef: BsModalRef | any;",
			"    dialogDetailRef: BsModalRef | any;",
			"    dialogDeleteRef: BsModalRef | any;",
			"    constructor(",
			"      private router: Router,",
			"      private helpers: HelperService,",
			"      private modalService: BsModalService,",
			"      private $1Service: $1Service",
			"    ) { }",
			"    ngOnInit(): void {",
			"      // Last search saved in local storage",
			"      // It's reseted when any menu item is clicked",
			"      this.storagekey = `search.${this.helpers.getUrlName(this.router.url)}`;",
			"      if (this.helpers.existsInStorage(this.storagekey)) {",
			"        this.searchInfo = this.helpers.readFromStorage(this.storagekey);",
			"        this.searchData(false);",
			"      }",
			"      else {",
			"        // Read LocalStorage to setup last searchInfo with defaults",
			"        this.searchInfo = this.helpers.readFromStorage(this.storagekey);",
			"        this.searchInfo.searching = false;",
			"        this.searchInfo.onlyActive = true;",
			"        this.searchInfo.totalCount = 0;",
			"      }",
			"    }",
			"    /**",
			"     * Fires when page numbers is clicked",
			"     * @param event the page clicked",
			"     */",
			"    pageChanged(event: any): void {",
			"      this.searchInfo.pageIndex = event;",
			"      this.searchData(false);",
			"    }",
			"    /**",
			"     * Fires when sort option is clicked",
			"     * @param key is data attribute from OrderItems array clicked",
			"     */",
			"    onSort(key: any): void {",
			"      if (this.searchInfo.sortBy === key) {",
			"        if (this.searchInfo.sortValue === 'asc') {",
			"          this.searchInfo.sortValue = 'desc';",
			"        }",
			"        else {",
			"          this.searchInfo.sortValue = 'asc';",
			"        }",
			"      }",
			"      this.searchInfo.sortBy = key;",
			"      this.searchData(true);",
			"    }",
			"    /**",
			"     * Fires search API, when page is changed reset is false",
			"     * @param reset specified if page is reseted, only is false when pages changes",
			"     */",
			"    searchData(reset: boolean = false): void {",
			"      if(reset) {",
			"        this.searchInfo.pageIndex = 1;",
			"      }",
			"      this.searched = true;",
			"      this.helpers.saveToStorage(this.storagekey, this.searchInfo);",
			"      this.searchInfo.searching = true;",
			"      this.membersService.search(this.searchInfo).subscribe({",
			"        next: (r: any) => {",
			"          // Result with Search API signature",
			"          this.items = r.res;",
			"          this.searchInfo.totalCount = r.totalCount;",
			"          this.searchInfo.searching = false;",
			"        }, ",
			"        error: (e: any) => {",
			"          this.searchInfo.searching = false;",
			"          this.helpers.HandleNonSuccessfulHttpResponse(e);",
			"        }",
			"      });",
			"    }",
			"    showAdvanced(template: TemplateRef<any>): void {",
			"      this.dialogAdvancedRef = this.modalService.show(template, { class: 'modal-md' });",
			"    }",
			"    applyAdvanced(): void {",
			"      this.dialogAdvancedRef.hide();",
			"      this.searchData(true);",
			"    }",
			"    add(): void {",
			"      this.helpers.RaiseNotification('warning', 'Error', 'Not implemented');",
			"      this.items.push({ memberId: 1, memberFullName: 'Luis Miguel'});",
			"    }",
			"    showDelete(data: any, template: TemplateRef<any>): void {",
			"      this.selected = data;",
			"      this.dialogDeleteRef = this.modalService.show(template, { class: 'modal-sm' });",
			"    }",
			"    delete(): void {",
			"      this.items.pop();",
			"      this.dialogDeleteRef.hide();",
			"      this.helpers.RaiseNotification('warning', 'Error', 'Not implemented');",
			"    }",
			"    detail(data: any): void {",
			"      this.selected = data;",
			"      this.dialogDetailRef.hide();",
			"      this.helpers.RaiseNotification('warning', 'Error', 'Not implemented');",
			"    }"
		],
		"description": "Search Template Angular Component"
	},
	"Detail Component class": {
		"prefix": "gr-en-detail-class",
		"body": [
			"  @Input() id = 0;",
			"  working = false;",
			"  selected: any;",
			"  constructor(",
			"    private helpers: HelperService,",
			"    private $1Service: $1Service",
			"  ) { }",
			"",
			"  ngOnInit(): void {",
			"    if (this.selected) { // only search once",
			"      this.working = false;",
			"      this.$1Service.get(this.id)",
			"        .subscribe((r: any) => {",
			"          this.working = false;",
			"          this.selected = r;",
			"        }, (e: any) => {",
			"          this.working = false;",
			"          this.helpers.RaiseNotification('danger', '$1', 'Cannot get $1: ' + e.error);",
			"        });",
			"    }"
		],
		"description": "Detail Component class"
	},
	"Autocomplete clientes ngOnInit": {
		"prefix": "gr-autocomplete-clientes-metodos",
		"body": [
			"this.searchInfo.cobradorId = 0;",
			"if (this.searchInfo.clienteId > 0) //Levantó el cliente de la última búsqueda",
			"{",
			"    this.clientesService.selectClientes({ clienteId: this.searchInfo.clienteId, cobradorId: this.searchInfo.cobradorId })",
			"        .subscribe((r: any) => {",
			"            if (r.res != undefined && r.res != null && r.res.length > 0) {",
			"                this.clienteNombre = r.res[0].nombreCompleto;",
			"                this.searchDatos(true);",
			"            }",
			"        }, e => {",
			"            this.helpers.HandleNonSuccessfulHttpResponse(e);",
			"        });",
			"}",
			"//Buscador de clientes -> declarar clientes$: Observable<any[]>; y clienteNombre: string; y clienteSeleccionado: any; en el componente",
			"this.clientes$ = new Observable((observer: Observer<any>) => {",
			"  observer.next(this.clienteNombre);",
			"}).pipe(",
			"  switchMap((query: string) => {",
			"    if (query) {",
			"      return this.clientesService.selectClientes({ searchText: query, cobradorId: this.searchInfo.cobradorId })",
			"        .pipe(",
			"          map((data: any) => data && data.res || []),",
			"          tap(() => noop, err => {",
			"            // in case of http error",
			"            this.helpers.RaiseNotification('danger', 'Error', \"No se pudo cargar los clientes \" + err.message);",
			"          })",
			"        );",
			"    }",
			"    return of([]);",
			"  })",
			");"
		],
		"description": "Autocomplete clientes ngOnInit"
	},
	"Autocomplete clientes métodos": {
		"prefix": "gr-autocomplete-clientes-metodos",
		"body": [
			"onClienteKeyUp() {",
			"    if (this.clienteNombre?.length == 0) {",
			"        this.searchInfo.clienteId = 0;",
			"        this.searchInfo.totalCount = 0;",
			"        this.clienteSeleccionado = null;",
			"        this.items = [];",
			"        this.seBusco = false;",
			"        this.totalGeneral = 0;",
			"    }",
			"}",
			"onSelect(event: TypeaheadMatch): void {",
			"    this.clienteSeleccionado = event.item;",
			"    this.searchInfo.clienteId = event.item.clienteId;",
			"    this.searchDatos(true);",
			"}"
		],
		"description": "Autocomplete clientes métodos"
	},
	"Notification Danger": {
		"prefix": "gr-not-danger",
		"body": [
			"this.helpers.RaiseNotification('danger', '$1', '$2');"
		],
		"description": "Notification Danger"
	},
	"Notification Success": {
		"prefix": "gr-not-success",
		"body": [
			"this.helpers.RaiseNotification('success', '$1', '$2');"
		],
		"description": "Notification Success"
	},
	"Notification Warning": {
		"prefix": "gr-not-warning",
		"body": [
			"this.helpers.RaiseNotification('warning', '$1', '$2');"
		],
		"description": "Notification Warning"
	}
}