{
	"Search Template Angular Component": {
		"prefix": "gr-en-search-ts",
		"body": [
		  "  storagekey: string = '';",
		  "  searchInfo: any;",
		  "  items: any[] = [];",
		  "  selected: any;",
		  "  searched = false;",
		  "  orderItems = [{ title: 'Item', data: 'nameOfField', selected: false }];",
		  "  dialogAdvancedRef: BsModalRef | any;",
		  "  dialogDetailRef: BsModalRef | any;",
		  "  dialogDeleteRef: BsModalRef | any;",
		  "  dialogEditRef: BsModalRef | any;",
		  "  constructor(",
		  "    private router: Router,",
		  "    private activatedRoute: ActivatedRoute,",
		  "    private helpers: HelperService,",
		  "    private modalService: BsModalService,",
		  "    private $1Service: $1Service,",
		  "  ) {}",
		  "  ngOnInit(): void {",
		  "    // Last search saved in local storage",
		  "    // It's reseted when any menu item is clicked",
		  "    let reset = true;",
		  "    this.storagekey = `search.${this.helpers.getUrlName(this.router.url)}`;",
		  "    if (this.helpers.existsInStorage(this.storagekey)) {",
		  "      this.searchInfo = this.helpers.readFromStorage(this.storagekey);",
		  "      reset = false;",
		  "    } else {",
		  "      // Read LocalStorage to setup last searchInfo with defaults",
		  "      this.searchInfo = this.helpers.readFromStorage(this.storagekey);",
		  "      this.searchInfo.searching = false;",
		  "      this.searchInfo.onlyActive = true;",
		  "      this.searchInfo.totalCount = 0;",
		  "      // this.searchInfo.fromDate = this.helpers.fechaDias(-30);",
		  "    }",
		  "    this.searchData(reset);",
		  "  }",
		  "  /**",
		  "   * Fires when page numbers is clicked",
		  "   * @param event the page clicked",
		  "   */",
		  "  pageChanged(event: any): void {",
		  "    this.searchInfo.pageIndex = event;",
		  "    this.searchData(false);",
		  "  }",
		  "  /**",
		  "   * Fires when sort option is clicked",
		  "   * @param key is data attribute from OrderItems array clicked",
		  "   */",
		  "  onSort(key: any): void {",
		  "    if (this.searchInfo.sortBy === key) {",
		  "      if (this.searchInfo.sortValue === 'asc') {",
		  "        this.searchInfo.sortValue = 'desc';",
		  "      } else {",
		  "        this.searchInfo.sortValue = 'asc';",
		  "      }",
		  "    }",
		  "    this.searchInfo.sortBy = key;",
		  "    this.searchData(true);",
		  "  }",
		  "  /**",
		  "   * Fires search API, when page is changed reset is false",
		  "   * @param reset specified if page is reseted, only is false when pages changes",
		  "   */",
		  "  searchData(reset: boolean = false): void {",
		  "    if (reset) {",
		  "      this.searchInfo.pageIndex = 1;",
		  "    }",
		  "    this.searched = true;",
		  "    this.helpers.saveToStorage(this.storagekey, this.searchInfo);",
		  "    this.searchInfo.searching = true;",
		  "    this.$1Service.search(this.searchInfo).subscribe({",
		  "      next: (r: any) => {",
		  "        // Result with Search API signature",
		  "        this.items = r.res;",
		  "        this.searchInfo.totalCount = r.totalCount;",
		  "        this.searchInfo.searching = false;",
		  "      },",
		  "      error: (e: any) => {",
		  "        this.searchInfo.searching = false;",
		  "        this.helpers.HandleNonSuccessfulHttpResponse(e);",
		  "      },",
		  "    });",
		  "  }",
		  "  showAdvanced(template: TemplateRef<any>): void {",
		  "    this.dialogAdvancedRef = this.modalService.show(template, { class: 'modal-md' });",
		  "  }",
		  "  applyAdvanced(): void {",
		  "    this.dialogAdvancedRef.hide();",
		  "    this.searchData(true);",
		  "  }",
		  "",
		  "  // Is used if add is in Modal",
		  "  showAdd(data: any, template: TemplateRef<any>): void {",
		  "    if (!data) this.selected = { conceptoIngresoId: 0 };",
		  "    else this.selected = data;",
		  "    this.dialogEditRef = this.modalService.show(template, { class: 'modal-lg' });",
		  "  }",
		  "  // Is used if add is in Modal",
		  "  showEdit(data: any, template: TemplateRef<any>) {",
		  "    this.selected = data.sedeId;",
		  "    this.dialogEditRef = this.modalService.show(template, { class: 'modal-md' });",
		  "  }",
		  "  // Is used if add is in Modal",
		  "  acceptChanges() {",
		  "    this.dialogEditRef.hide();",
		  "    this.searchData(true);",
		  "  }",
		  "",
		  "  // When Add is in other page",
		  "  add(): void {",
		  "    this.helpers.RaiseNotification('warning', 'Error', 'Not implemented');",
		  "    this.router.navigate(['$../add'], { relativeTo: this.activatedRoute });",
		  "  }",
		  "  // When Edit is in other page",
		  "  edit(data: any) {",
		  "    this.selected = data;",
		  "    if (this.selected) {",
		  "      this.router.navigate(['../add', { $1Id: this.selected.$1 }], { relativeTo: this.activatedRoute });",
		  "    }",
		  "  }",
		  "",
		  "  showDelete(data: any, template: TemplateRef<any>): void {",
		  "    this.selected = data;",
		  "    this.dialogDeleteRef = this.modalService.show(template, { class: 'modal-sm' });",
		  "  }",
		  "  delete(): void {",
		  "    this.items.pop();",
		  "    this.dialogDeleteRef.hide();",
		  "    this.helpers.RaiseNotification('warning', 'Error', 'Not implemented');",
		  "  }",
		  "  showDetail(data: any, template: TemplateRef<any>): void {",
		  "    this.selected = data;",
		  "    this.dialogDetailRef = this.modalService.show(template, { class: 'modal-lg' });",
		  "  }"
		],
		"description": "Search Template Angular Component"
	  },	
	"Detail Component class": {
		"prefix": "gr-en-detail-class",
		"body": [
			"  @Input() id = 0;",
			"  working = false;",
			"  selected: any;",
			"  constructor(",
			"    private helpers: HelperService,",
			"    private $1Service: $1Service",
			"  ) { }",
			"",
			"  ngOnInit(): void {",
			"    if (this.selected) { // only search once",
			"      this.working = false;",
			"      this.$1Service.get(this.id)",
			"        .subscribe((r: any) => {",
			"          this.working = false;",
			"          this.selected = r;",
			"        }, (e: any) => {",
			"          this.working = false;",
			"          this.helpers.RaiseNotification('danger', '$1', 'Cannot get $1: ' + (e.error?.Message ?? e.error));",
			"        });",
			"    }"
		],
		"description": "Detail Component class"
	},
	"Autocomplete generico ngOnInit": {
		"prefix": "gr-autocomplete-$1-metodos",
		"body": [
			"if (this.searchInfo.$1Id > 0) //Levantó el $1 de la última búsqueda",
			"{",
			"    this.$1Service.select$1({ $1Id: this.searchInfo.$1Id, cobradorId: this.searchInfo.cobradorId })",
			"        .subscribe((r: any) => {",
			"            if (r.res != undefined && r.res != null && r.res.length > 0) {",
			"                this.$1Name = r.res[0].fullName;",
			"                this.searchData(true);",
			"            }",
			"        }, e => {",
			"            this.helpers.HandleNonSuccessfulHttpResponse(e);",
			"        });",
			"}",
			"//Buscador de $1 -> declarar $1$: Observable<any[]>; y $1Name: string; y selected: any; en el componente",
			"this.$1$ = new Observable((observer: Observer<any>) => {",
			"  observer.next(this.$1Name);",
			"}).pipe(",
			"  switchMap((query: string) => {",
			"    if (query) {",
			"      return this.$1Service.select$1({ searchText: query, cobradorId: this.searchInfo.cobradorId })",
			"        .pipe(",
			"          map((data: any) => data && data.res || []),",
			"          tap(() => noop, err => {",
			"            // in case of http error",
			"            this.helpers.RaiseNotification('danger', 'Error', \"No se pudo cargar los $1 \" + err.message);",
			"          })",
			"        );",
			"    }",
			"    return of([]);",
			"  })",
			");"
		],
		"description": "Autocomplete $1 ngOnInit"
	},
	"Autocomplete generico métodos": {
		"prefix": "gr-autocomplete-$1-metodos",
		"body": [
			"on$1KeyUp() {",
			"    if (this.$1Name?.length == 0) {",
			"        this.searchInfo.$1Id = 0;",
			"        this.searchInfo.totalCount = 0;",
			"        this.selected = null;",
			"        this.items = [];",
			"        this.searched = false;",
			"        this.totalGeneral = 0;",
			"    }",
			"}",
			"onSelect(event: TypeaheadMatch): void {",
			"    this.selected = event.item;",
			"    this.searchInfo.$1Id = event.item.$1Id;",
			"    this.searchData(true);",
			"}"
		],
		"description": "Autocomplete $1 métodos"
	},
	"Notification Danger": {
		"prefix": "gr-not-danger",
		"body": [
			"this.helpers.RaiseNotification('danger', '$1', '$2');"
		],
		"description": "Notification Danger"
	},
	"Notification Success": {
		"prefix": "gr-not-success",
		"body": [
			"this.helpers.RaiseNotification('success', '$1', '$2');"
		],
		"description": "Notification Success"
	},
	"Notification Warning": {
		"prefix": "gr-not-warning",
		"body": [
			"this.helpers.RaiseNotification('warning', '$1', '$2');"
		],
		"description": "Notification Warning"
	},
	"Suscribe Service": {
		"prefix": "gr-suscribe-service",
		"body": [
			"this.$1s.$2s().subscribe({",
			"  next: (r: any) => {",
			"    // Result with API",
			"  },",
			"  error: (e: any) => {",
			"    this.helpers.RaiseNotification('danger', 'Error', '$3s' + (e.error?.Message ?? e.error));",
			"  },",
			"});"
		],
		"description": "Suscribe Service"
	},
	"Crud Service": {
		"prefix": "gr-crud-service",
		"body": [
			"export class $1sService {",
			"  constructor(private http: HttpClient, private helpers: HelperService) {}",
			"  search(par: any) {",
			"    return this.http.get(environment.apiUrl + '/$1s/', {",
			"      params: this.helpers.createHttpParams(par),",
			"    });",
			"  }",
			"  get(id: number) {",
			"    return this.http.get(environment.apiUrl + '/$1s/' + id);",
			"  }",
			"  delete(id: number) {",
			"    return this.http.delete(environment.apiUrl + '/$1s/' + id);",
			"  }",
			"  add($1: any) {",
			"    return this.http.post(environment.apiUrl + '/$1s', $1);",
			"  }",
			"  update($1: any) {",
			"    return this.http.put(",
			"      environment.apiUrl + `/$1s/${$1.$1Id}`,",
			"      $1",
			"    );",
			"  }",
			"}",
			""
		],
		"description": "Crud Service"
	},
	"Form Add Edit Spanish": {
		"prefix": "gr-form-edit-es",
		"body": [
		  "  @Input() $1Id: any = 0;",
		  "  @Output() cancel = new EventEmitter();",
		  "  $1: any = {};",
		  "",
		  "  constructor(",
		  "    private $1sService: $1sService,",
		  "    private helpers: HelperService,",
		  "    private router: Router,",
		  "    private activatedRoute: ActivatedRoute,",
		  "  ) {}",
		  "",
		  "  ngOnInit(): void {",
		  "    if (this.activatedRoute.snapshot.paramMap.get('$1Id')) {",
		  "      this.$1Id = this.activatedRoute.snapshot.paramMap.get('$1Id');",
		  "      this.$1sService.get(this.$1Id).subscribe((r: any) => {",
		  "        this.$1 = r;",
		  "      });",
		  "    }",
		  "  }",
		  "  onCancel() {",
		  "    this.router.navigate(['../search'], { relativeTo: this.activatedRoute });",
		  "  }",
		  "  save() {",
		  "    if (this.$1Id) {",
		  "      this.$1sService.update(this.$1).subscribe({",
		  "        next: (r: any) => {",
		  "          this.helpers.RaiseNotification('success', 'Grabar', 'Se ha actualizado la $1');",
		  "          this.onCancel(); // cierra el dialogo o navega al default",
		  "        },",
		  "        error: (e) => {",
		  "          this.helpers.RaiseNotification(",
		  "            'danger',",
		  "            'Grabar',",
		  "            'Error al intentar actualizar la $1. ' + (e.error?.Message ?? e.error),",
		  "          );",
		  "        },",
		  "      });",
		  "    } else {",
		  "      this.$1sService.add(this.$1).subscribe({",
		  "        next: (r: any) => {",
		  "          this.helpers.RaiseNotification('success', 'Grabar', 'Se ha agregado la $1');",
		  "          this.onCancel(); // cierra el dialogo o navega al default",
		  "        },",
		  "        error: (e) => {",
		  "          this.helpers.RaiseNotification(",
		  "            'danger',",
		  "            'Grabar',",
		  "            'Error al intentar agregar la $1. Debe completar los datos requeridos',",
		  "          );",
		  "        },",
		  "      });",
		  "    }",
		  "  }"
		],
		"description": "Form Add Edit Spanish"
	  },
	  "Search delete Spanish": {
		"prefix": "gr-form-delete-es",
		"body": [
		  "  delete(): void {",
		  "    this.searchInfo.searching = true;",
		  "    this.$1Service.delete(this.selected.$1Id).subscribe({",
		  "      next: (r: any) => {",
		  "        this.searchInfo.searching = false;",
		  "        this.dialogDeleteRef.hide();",
		  "        this.searchData(false);",
		  "        this.helpers.RaiseNotification('success', 'Eliminar', 'El item se elimino correctamente');",
		  "      },",
		  "      error: (e: any) => {",
		  "        this.searchInfo.searching = false;",
		  "        this.dialogDeleteRef.hide();",
		  "        this.helpers.RaiseNotification('danger', 'Eliminar', 'El item no se elimino: ' + (e.error?.Message ?? e.error));",
		  "      },",
		  "    });",
		  "  }"
		],
		"description": "Search delete Spanish"
	  }
}